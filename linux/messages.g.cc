// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "messages.g.h"

struct _FlutterPlugin1MyClass {
  GObject parent_instance;

  uint8_t* int_list;
  size_t int_list_length;
};

G_DEFINE_TYPE(FlutterPlugin1MyClass, flutter_plugin1_my_class, G_TYPE_OBJECT)

static void flutter_plugin1_my_class_dispose(GObject* object) {
  G_OBJECT_CLASS(flutter_plugin1_my_class_parent_class)->dispose(object);
}

static void flutter_plugin1_my_class_init(FlutterPlugin1MyClass* self) {
}

static void flutter_plugin1_my_class_class_init(FlutterPlugin1MyClassClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_plugin1_my_class_dispose;
}

FlutterPlugin1MyClass* flutter_plugin1_my_class_new(const uint8_t* int_list, size_t int_list_length) {
  FlutterPlugin1MyClass* self = FLUTTER_PLUGIN1_MY_CLASS(g_object_new(flutter_plugin1_my_class_get_type(), nullptr));
  self->int_list = static_cast<uint8_t*>(memcpy(malloc(int_list_length), int_list, int_list_length));
  self->int_list_length = int_list_length;
  return self;
}

const uint8_t* flutter_plugin1_my_class_get_int_list(FlutterPlugin1MyClass* self, size_t* length) {
  g_return_val_if_fail(FLUTTER_PLUGIN1_IS_MY_CLASS(self), nullptr);
  *length = self->int_list_length;
  return self->int_list;
}

static FlValue* flutter_plugin1_my_class_to_list(FlutterPlugin1MyClass* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_uint8_list(self->int_list, self->int_list_length));
  return values;
}

static FlutterPlugin1MyClass* flutter_plugin1_my_class_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  const uint8_t* int_list = fl_value_get_uint8_list(value0);
  size_t int_list_length = fl_value_get_length(value0);
  return flutter_plugin1_my_class_new(int_list, int_list_length);
}

struct _FlutterPlugin1MessageCodec {
  FlStandardMessageCodec parent_instance;

};

G_DEFINE_TYPE(FlutterPlugin1MessageCodec, flutter_plugin1_message_codec, fl_standard_message_codec_get_type())

static gboolean flutter_plugin1_message_codec_write_flutter_plugin1_my_class(FlStandardMessageCodec* codec, GByteArray* buffer, FlutterPlugin1MyClass* value, GError** error) {
  uint8_t type = 129;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = flutter_plugin1_my_class_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean flutter_plugin1_message_codec_write_value(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case 129:
        return flutter_plugin1_message_codec_write_flutter_plugin1_my_class(codec, buffer, FLUTTER_PLUGIN1_MY_CLASS(fl_value_get_custom_value_object(value)), error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(flutter_plugin1_message_codec_parent_class)->write_value(codec, buffer, value, error);
}

static FlValue* flutter_plugin1_message_codec_read_flutter_plugin1_my_class(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(FlutterPlugin1MyClass) value = flutter_plugin1_my_class_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(129, G_OBJECT(value));
}

static FlValue* flutter_plugin1_message_codec_read_value_of_type(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type, GError** error) {
  switch (type) {
    case 129:
      return flutter_plugin1_message_codec_read_flutter_plugin1_my_class(codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(flutter_plugin1_message_codec_parent_class)->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void flutter_plugin1_message_codec_init(FlutterPlugin1MessageCodec* self) {
}

static void flutter_plugin1_message_codec_class_init(FlutterPlugin1MessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value = flutter_plugin1_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type = flutter_plugin1_message_codec_read_value_of_type;
}

static FlutterPlugin1MessageCodec* flutter_plugin1_message_codec_new() {
  FlutterPlugin1MessageCodec* self = FLUTTER_PLUGIN1_MESSAGE_CODEC(g_object_new(flutter_plugin1_message_codec_get_type(), nullptr));
  return self;
}

struct _FlutterPlugin1MyHostApiDoThingResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(FlutterPlugin1MyHostApiDoThingResponse, flutter_plugin1_my_host_api_do_thing_response, G_TYPE_OBJECT)

static void flutter_plugin1_my_host_api_do_thing_response_dispose(GObject* object) {
  FlutterPlugin1MyHostApiDoThingResponse* self = FLUTTER_PLUGIN1_MY_HOST_API_DO_THING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(flutter_plugin1_my_host_api_do_thing_response_parent_class)->dispose(object);
}

static void flutter_plugin1_my_host_api_do_thing_response_init(FlutterPlugin1MyHostApiDoThingResponse* self) {
}

static void flutter_plugin1_my_host_api_do_thing_response_class_init(FlutterPlugin1MyHostApiDoThingResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_plugin1_my_host_api_do_thing_response_dispose;
}

FlutterPlugin1MyHostApiDoThingResponse* flutter_plugin1_my_host_api_do_thing_response_new(FlValue* return_value) {
  FlutterPlugin1MyHostApiDoThingResponse* self = FLUTTER_PLUGIN1_MY_HOST_API_DO_THING_RESPONSE(g_object_new(flutter_plugin1_my_host_api_do_thing_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

FlutterPlugin1MyHostApiDoThingResponse* flutter_plugin1_my_host_api_do_thing_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  FlutterPlugin1MyHostApiDoThingResponse* self = FLUTTER_PLUGIN1_MY_HOST_API_DO_THING_RESPONSE(g_object_new(flutter_plugin1_my_host_api_do_thing_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _FlutterPlugin1MyHostApi {
  GObject parent_instance;

  const FlutterPlugin1MyHostApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(FlutterPlugin1MyHostApi, flutter_plugin1_my_host_api, G_TYPE_OBJECT)

static void flutter_plugin1_my_host_api_dispose(GObject* object) {
  FlutterPlugin1MyHostApi* self = FLUTTER_PLUGIN1_MY_HOST_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(flutter_plugin1_my_host_api_parent_class)->dispose(object);
}

static void flutter_plugin1_my_host_api_init(FlutterPlugin1MyHostApi* self) {
}

static void flutter_plugin1_my_host_api_class_init(FlutterPlugin1MyHostApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_plugin1_my_host_api_dispose;
}

static FlutterPlugin1MyHostApi* flutter_plugin1_my_host_api_new(const FlutterPlugin1MyHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  FlutterPlugin1MyHostApi* self = FLUTTER_PLUGIN1_MY_HOST_API(g_object_new(flutter_plugin1_my_host_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void flutter_plugin1_my_host_api_do_thing_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  FlutterPlugin1MyHostApi* self = FLUTTER_PLUGIN1_MY_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->do_thing == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t my_number = fl_value_get_int(value0);
  g_autoptr(FlutterPlugin1MyHostApiDoThingResponse) response = self->vtable->do_thing(my_number, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MyHostApi", "doThing");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MyHostApi", "doThing", error->message);
  }
}

void flutter_plugin1_my_host_api_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const FlutterPlugin1MyHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(FlutterPlugin1MyHostApi) api_data = flutter_plugin1_my_host_api_new(vtable, user_data, user_data_free_func);

  g_autoptr(FlutterPlugin1MessageCodec) codec = flutter_plugin1_message_codec_new();
  g_autofree gchar* do_thing_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_plugin_1.MyHostApi.doThing%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) do_thing_channel = fl_basic_message_channel_new(messenger, do_thing_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(do_thing_channel, flutter_plugin1_my_host_api_do_thing_cb, g_object_ref(api_data), g_object_unref);
}

void flutter_plugin1_my_host_api_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(FlutterPlugin1MessageCodec) codec = flutter_plugin1_message_codec_new();
  g_autofree gchar* do_thing_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_plugin_1.MyHostApi.doThing%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) do_thing_channel = fl_basic_message_channel_new(messenger, do_thing_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(do_thing_channel, nullptr, nullptr, nullptr);
}
